openapi: 3.0.3
info:
  title: Internship Management REST API
  description: REST API endpoints for internship management
  version: v1

servers:
  - url: http://localhost:8080/api/internship-management/v1

paths:
  /users:
    post:
      tags:
        - User
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '400':
          description: Invalid request

    get:
      tags:
        - User
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponseDTO'

  /users/{id}:
    get:
      tags:
        - User
      summary: Get user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: User not found

    put:
      tags:
        - User
      summary: Update a user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestDTO'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
        '404':
          description: User not found

    delete:
      tags:
        - User
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found

  /users/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      operationId: loginUser
      description: Authenticate a user using username (or email) and password. Returns a JWT token on success.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDTO'
        '401':
          description: Invalid credentials
        '400':
          description: Bad request

components:
  schemas:
    UserRequestDTO:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          example: aurellefoko
        password:
          type: string
          format: password
          example: motdepasse123
        email:
          type: string
          format: email
          example: aurelle@example.com
        firstName:
          type: string
          example: Aurelle
        lastName:
          type: string
          example: Foko

    UserResponseDTO:
      type: object
      required:
        - id
        - username
        - email
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: aurellefoko
        email:
          type: string
          format: email
          example: aurelle@example.com
        firstName:
          type: string
          example: Aurelle
        lastName:
          type: string
          example: Foko

    LoginRequestDTO:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: johndoe
          description: The user's username or email
        password:
          type: string
          format: password
          example: mySecret123
          description: The user's password

    LoginResponseDTO:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          description: JWT authentication token
        userId:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: johndoe
